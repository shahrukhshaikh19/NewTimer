{"version":3,"sources":["components/CalenderInput.js","components/Reminder.js","App.js","reportWebVitals.js","index.js"],"names":["CalenderInput","CalendarInput","value","start","className","type","id","onChange","onClick","Reminder","days","hours","minutes","seconds","timeend","App","event","setState","input","target","state","reminderDate","Date","getTime","endtime","toDateString","substring","getTodayTime","today","counter","countDownEnd","timer","clearInterval","interval","setInterval","Math","floor","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.439dad3b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CalenderInput = ({CalendarInput, value,start}) => {\r\n    return(\r\n        <div>\r\n            <div className=\"flex flex-column justify-between\">\r\n            <input className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\" type=\"date\" id=\"InputField\" onChange={CalendarInput} value={value}/>\r\n            </div>\r\n        <button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-navy\" onClick={start}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalenderInput;","import React from \"react\";\r\n\r\nconst Reminder = ({days, hours,minutes,seconds,timeend}) => {\r\n    return(\r\n        <div  className=\" bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 flex flex-column items-center justify-center\">\r\n            <h1>CountDown Ends at</h1>\r\n            <h1>{timeend}</h1>\r\n        <div  className=\" bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 flex items-center justify-center\">\r\n            <div><p >{days} Days/</p></div>\r\n            <div><p >{hours} Hours/</p></div>\r\n            <div><p >{minutes} Minutes/</p></div>\r\n            <div><p >{seconds} Seconds</p></div>\r\n\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reminder;","import React,{ Component } from 'react';\nimport './App.css';\nimport CalenderInput from './components/CalenderInput';\nimport Reminder from './components/Reminder';\nclass App extends Component {\n  constructor() {\n    super();\n    this.reminderDate = 0;\n    this.endtime = \"\";\n    this.state = {\n      input: \"\",\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }\n  }\n\n  CalendarInput = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  start = () => {\n    if(this.state.input!==\"\") {\n      this.reminderDate = new Date(this.state.input).getTime();\n      this.endtime = new Date(this.state.input).toDateString();\n      this.endtime = this.endtime.substring();\n      this.setState({input: \"\"});\n      this.getTodayTime();\n    }\n  }\n\n  getTodayTime = () => {\n    let today = new Date().getTime();\n\n    let counter = this.reminderDate - today;\n    if(counter<0) {\n      this.endtime = \"\";\n      this.setState({days: 0, hours: 0, minutes: 0, seconds: 0}, () => this.countDownEnd());\n    }\n    else {\n      this.timer(counter);\n    }\n  }\n\n  timer = (counter) => {\n      clearInterval(this.interval);\n      this.interval = setInterval(() => {\n      counter = counter- 1000;\n      let days = Math.floor(counter / (24*60*60*1000));\n      let hours = Math.floor((counter % (24*60*60*1000)) / (60*60*1000));\n      let minutes = Math.floor((counter % (60*60*1000)) / (60*1000));\n      let seconds = Math.floor((counter % (60*1000)) / (1000));\n      this.setState({days: days, hours: hours, minutes: minutes, seconds: seconds}, () => this.countDownEnd());\n    }, 1000);\n  }\n\n  countDownEnd = () => {\n    let {days, hours, minutes, seconds} = this.state;\n    let sum = days + hours + minutes + seconds;\n    if(!sum) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    let {days, hours, minutes, seconds} = this.state;\n    return (\n      <div className=\"flex flex-column items-center justify-center \" >\n        <Reminder days={days} hours={hours} minutes={minutes} seconds={seconds} timeend={this.endtime}/>\n        <div>\n          <CalenderInput CalendarInput={this.CalendarInput} value={this.state.input} start={this.start}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport tachyons from 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}